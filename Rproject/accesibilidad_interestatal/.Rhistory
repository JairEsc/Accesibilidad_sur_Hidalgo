uso_de_suelo_shp=read_sf("../inegiusodesuelo/inegiusodesuelo.shp")
####Cargamos los datos a utilizar:
#Pendiente
#Uso de Suelo
library(raster)
library(sf)
uso_de_suelo_shp=read_sf("../inegiusodesuelo/inegiusodesuelo.shp")
#pendiente_shp=read_sf("../poetem2023/poetem2023.shp")
carreteras_shp=read_sf("../carreteras inegi/conjunto_de_datos/red_vial.shp")|> st_transform(st_crs(uso_de_suelo_shp))
carreteras_shp_proy=carreteras_shp
carreteras_shp_zona=sf::st_crop(carreteras_shp_proy,sf::st_bbox(uso_de_suelo_shp))
carreteras_shp_zona$VELOCIDAD [carreteras_shp_zona$VELOCIDAD =='N/A']="5"
carreteras_shp_zona$VELOCIDAD=as.numeric(carreteras_shp_zona$VELOCIDAD)
charreteras_raster=terra::rast(carreteras_shp_zona,nrow=1000,ncol=1000)
charreteras_raster = terra::rasterize(carreteras_shp_zona, charreteras_raster,field="VELOCIDAD",touches=T,update=T)
gc()
base_vacia=charreteras_raster
base_vacia=base_vacia*0
base_vacia[base_vacia |> is.na()]=0
slp_walk = 6 * exp(-0.4 * abs(tan(base_vacia*0 * pi / 180) + 0.05))  # Calcula la velocidad de caminata ajustada por la pendiente.
#plot(-90:90,6*exp(-0.4*abs(tan(-90:90*pi/180)))+0.05,'l',ylab='Velocidad km/h',main='Velocidad caminando en función de la pendiente',xlab='Grados')
terrain_walk_spd = 1 * slp_walk       #Le quité el /5.0. Quiero pensar que es la velocidad de caminata según uso de suelo. El promedio es de 5.5 km/h         # Calcula la velocidad sobre el terreno ajustada por la pendiente y el uso de suelo.
##########Accesibilidad por carreteras
slp_car = 50 * exp(-0.4 * abs(tan(base_vacia * pi / 180) + 0.12))  # Calcula la velocidad sobre carreteras ajustada por la pendiente.
sloped_road_spd = charreteras_raster * slp_car / 50.0 # Calcula la velocidad ajustada por pendiente para carreteras y la convierte en un raster.
sloped_road_spd=raster(sloped_road_spd)
terrain_walk_spd=raster(terrain_walk_spd)
merged_spd = merge(sloped_road_spd, terrain_walk_spd)     # Combina los rasters de velocidad de carreteras y terreno.
friction = 1.0 / (merged_spd * 1000 / 60.0 )
#plot(friction)
#install.packages("gdistance")
library(gdistance)
Trans = transition(friction, function(x) 1 / mean(x), 8)  # Crea una matriz de transición basada en la fricción.
T.GC = geoCorrection(Trans, type="c")
uso_de_suelo_shp$geometry |> st_centroid()
uso_de_suelo_shp$geometry |> st_centroid() |> st_centroid()
tiempo_zona = accCost(T.GC, fromCoords = c(367273, 2135626))  # Calcula el costo acumulado desde un punto de inicio (coordenadas especificadas) usando la matriz de transición corregida (T.GC).
plot(tiempo_zona)
plot(merged_spd)
merged_spd |> getValues() |> min(na.rm=T)
charreteras_raster |> writeRaster("../carreteras_recortado_a_zona.tiff")
uso_de_suelo_shp=read_sf("../inegiusodesuelo/inegiusodesuelo.shp")
View(uso_de_suelo_shp)
uso_de_suelo_shp$descripcio |> unique()
uso_de_suelo_shp$descripcio |> unique() |> sort)
uso_de_suelo_shp$descripcio |> unique() |> sort()
municipios=read_sf("../../../Municipios-fallando/Datos/Shapes y Geojsons/municipiosjair.shp")
municipios[municipios$NOM_MUN=="Ajacuba",]
municipios_p_luz=municipios |>
dplyr::filter(NOM_MUN%in%c(
"Ajacuba","Almoloya",
"Apan","Cuautepec de Hinojosa",
"Francisco. I. Madero","Huichapan",
"Ixmiquilapan","Nopala de Villagrán","Santiago de Anaya","Tula de Allende"
))
municipios$NOM_MUN
View(municipios_p_luz)
municipios_p_luz=municipios |>
dplyr::filter(NOM_MUN%in%c(
"Ajacuba","Almoloya",
"Apan","Cuautepec de Hinojosa",
"Francisco I. Madero","Huichapan",
"Ixmiquilpan","Nopala de Villagrán","Santiago de Anaya","Tula de Allende"
))
municipios_p_luz2=municipios_p_luz |>
dplyr::mutate(centroide=st_centroid(geometry))
View(municipios_p_luz2)
c("-99.07804 20.11982", "-98.32709 19.74162","-98.44703 19.72288","-98.28169 19.98429","-99.08028 20.23528","-99.68075 20.38382","-99.20131 20.53247","-99.67267 20.23299","-98.98286 20.41237","-99.37672 20.06412")
municipios_p_luz2$centroide=c("-99.07804 20.11982", "-98.32709 19.74162","-98.44703 19.72288","-98.28169 19.98429","-99.08028 20.23528","-99.68075 20.38382","-99.20131 20.53247","-99.67267 20.23299","-98.98286 20.41237","-99.37672 20.06412")
municipios_p_luz2 |> dplyr::select(CVEGEO,Area,centroide) |> st_drop_geometry() |> write.csv("../../../../centroide_municipios_luz.csv",row.names = F,fileEncoding = "latin1")
municipios_p_luz2 |> dplyr::select(CVEGEO,NOM_MUN,centroide) |> st_drop_geometry() |> write.csv("../../../../centroide_municipios_luz.csv",row.names = F,fileEncoding = "latin1")
municipios_p_luz2$centroide |> paste()
